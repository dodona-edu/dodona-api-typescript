jest.mock('node-fetch');

import fetch from 'node-fetch';
import { PartialSubmission } from "../../lib/resources/partial_submission";
import { HttpClient } from "../../lib/http/http_client"
import { ExerciseManager } from "../../lib/managers/exercise_manager";
import { Exercise } from "../../lib/resources/exercise";
import { ExerciseNotFoundException } from '../../lib/exceptions/notfound/exercise_not_found_exception';
import { Series } from '../../lib/resources/series';

const {Response} = jest.requireActual('node-fetch');

describe("Tests UserManager.", () => {
	let client = new HttpClient().authenticate("Q9PS_BpiwUBNcCdGTv_6MRFb_ZZ_f5nz_DFo0rubbhw");
	let course_json = {"id":5,"name":"Closed Test Course","teacher":"Graaf van Rommelgem","color":"deep-purple","year":"2017-2018","visibility":"hidden","registration":"closed","created_at":"2019-09-13T09:29:22.000+02:00","updated_at":"2019-09-13T09:29:22.000+02:00","url":"http://localhost:3000/nl/courses/5.json","series":"http://localhost:3000/nl/courses/5/series.json"};	

	let exercise_json = {"id":1677102205,"name":"ISBN","description_format":"html","boilerplate":null,"programming_language":{"id":1,"name":"python","editor_name":"python","extension":"txt","created_at":"2019-09-13T09:29:52.000+02:00","updated_at":"2019-09-13T09:29:52.000+02:00"},"last_solution_is_best":true,"has_solution":true,"has_correct_solution":true,"description":"\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\"\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cp\u003eBinnen het ISBN-10 (\u003ci\u003eInternational Standard Book Numbering\u003c/i\u003e) systeem\n      dat tot eind 2006 gebruikt werd, kreeg elk boek een unieke code toegewezen\n      die bestaat uit 10 cijfers. De eerste 9 daarvan geven informatie over het\n      boek zelf, terwijl het laatste louter een controlecijfer is dat dient om\n      foutieve ISBN-10 codes te detecteren.\u003c/p\u003e\n    \u003cdiv class=\"dodona-centered-group\"\u003e \u003cimg alt=\"ISBN\" data-caption=\" \u0026lt;div class=\u0026quot;thumbcaption\u0026quot;\u0026gt; ISBN in tekst en streepjescode\u0026lt;/div\u0026gt; \"\n        src=\"media/ISBN.gif\" title=\"ISBN\" height=\"140\"\u003e \u003c/div\u003e\n    \u003cp\u003eIndien $$x_1, \\ldots, x_9$$ de eerste 9 cijfers van een ISBN-10 code\n      voorstellen, dan wordt het controlecijfer\u0026#160;$$x_{10}$$ als volgt\n      berekend: \\[x_{10} = (x_1+ 2x_2+ 3x_3+ 4x_4+ 5x_5+ 6x_6+ 7x_7+ 8x_8+\n      9x_9)\\!\\!\\!\\!\\mod{11}\\] Het controlecijfer $$x_{10}$$ kan m.a.w. de\n      waarden 0 tot en met 10 aannemen. Gevraagd wordt om een programma te\n      schrijven dat het controlecijfer berekent op basis van de eerste negen\n      cijfers van een ISBN-10 code.\u003c/p\u003e\n    \u003ch3\u003eInvoer\u003c/h3\u003e\n    \u003cp\u003eNegen natuurlijke getallen $$x_1, \\ldots, x_9$$ ($$0 \\leq x_1, \\ldots,\n      x_9 \\leq 9$$), elk op een afzonderlijke regel. Deze stellen de eerste\n      negen cijfers van een gegeven ISBN-10 code voor.\u003c/p\u003e\n    \u003ch3\u003eUitvoer\u003c/h3\u003e\n    \u003cp\u003eE\u0026#233;n regel die een natuurlijk getal bevat: het controlecijfer dat\n      correspondeert met de gegeven cijfers van een ISBN-10 code. Zorg ervoor\n      dat dit natuurlijk getal geen voorloopnullen heeft.\u003c/p\u003e\n    \u003ch3\u003eVoorbeeld\u003c/h3\u003e\n    \u003cp\u003e\u003cstrong\u003eInvoer:\u003c/strong\u003e\u003c/p\u003e\n    \u003cpre\u003e9\n9\n7\n1\n5\n0\n2\n1\n0\u003c/pre\u003e\n    \u003cp\u003e\u003cstrong\u003eUitvoer:\u003c/strong\u003e\u003c/p\u003e\n    \u003cpre\u003e0\u003c/pre\u003e\n    \u003cdiv class=\"hidden-print\"\u003e\n    \u003ch3\u003ePythia spreekt \u0026#8230;\u003c/h3\u003e\n    \u003cp\u003eIn onderstaande video legt Pythia uit hoe je deze opgave kunt aanpakken.\n      Bekijk de video als opstapje naar het oplossen van de oefeningen over \u003ca\n        href=\"https://dodona.ugent.be/nl/exercises/?filter=opgaven/reeks01\"\u003evariabelen,\n        expressies en statements\u003c/a\u003e.\u003c/p\u003e\n    \u003cdiv class=\"dodona-centered-group\"\u003e\u003ciframe src=\"https://www.youtube.com/embed/Ne35kBQNLXg\"\n        allowfullscreen=\"\" frameborder=\"0\" height=\"315\" width=\"560\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n    \u003ch3\u003eEpiloog\u003c/h3\u003e\n    \u003cdiv class=\"dodona-centered-group\"\u003e \u003cimg alt=\"evolution into barcode\" data-caption=\" \u0026lt;div class=\u0026quot;thumbcaption\u0026quot;\u0026gt;Dit is wat er van ons zal worden. Wees dus maar voorbereid.\u0026lt;/div\u0026gt; \"\n        src=\"media/evaluation_barcode.jpg\" title=\"evolution into barcode\" height=\"320px\"\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n","url":"http://localhost:3000/nl/exercises/1677102205.json"};
	let exercise_manager = new ExerciseManager("http://localhost:3000", client);

	it("Test exerciserManager.getAll(:number).", async () => {
		let exercises_json = {};
		let series = Series.fromJSON({"id":110,"name":"Reeks 19","description":"Molestiae quia reiciendis. In expedita quod. Itaque atque eum. Odio voluptatum excepturi. Quos deleniti quod. Est dolorem et. Consequuntur accusantium fugiat. Facilis ut quas. Qui est autem. Nesciunt magni tenetur. Sed impedit aut. Non commodi minus. Hic non quia. Quaerat nulla aut. Magnam enim et. Officiis et voluptate. Officiis ut incidunt. Distinctio ut maxime. Non ut reprehenderit. Autem repellendus perspiciatis. Deserunt iste qui. Maiores ea enim. Deserunt enim rem. Nostrum vitae aut. Veritatis ut qui.","visibility":"open","order":0,"created_at":"2019-09-13T09:30:16.000+02:00","updated_at":"2019-09-13T09:30:16.000+02:00","deadline":null,"url":"http://localhost:3000/nl/series/110.json","exercises":"http://localhost:3000/nl/series/110/exercises.json"});
		fetch.mockResolvedValue(new Response(JSON.stringify([{"id":1406271149,"name":"ISBN","description_format":"html","boilerplate":null,"programming_language":{"id":1,"name":"python","editor_name":"python","extension":"txt","created_at":"2019-09-13T09:29:52.000+02:00","updated_at":"2019-09-13T09:29:52.000+02:00"},"last_solution_is_best":true,"has_solution":false,"has_correct_solution":false,"description":"\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\"\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cp\u003eBinnen het ISBN-10 (\u003ci\u003eInternational Standard Book Numbering\u003c/i\u003e) systeem\n      dat tot eind 2006 gebruikt werd, kreeg elk boek een unieke code toegewezen\n      die bestaat uit 10 cijfers. De eerste 9 daarvan geven informatie over het\n      boek zelf, terwijl het laatste louter een controlecijfer is dat dient om\n      foutieve ISBN-10 codes te detecteren.\u003c/p\u003e\n    \u003cdiv class=\"dodona-centered-group\"\u003e \u003cimg alt=\"ISBN\" data-caption=\" \u0026lt;div class=\u0026quot;thumbcaption\u0026quot;\u0026gt; ISBN in tekst en streepjescode\u0026lt;/div\u0026gt; \"\n        src=\"media/ISBN.gif\" title=\"ISBN\" height=\"140\"\u003e \u003c/div\u003e\n    \u003cp\u003eIndien $$x_1, \\ldots, x_9$$ de eerste 9 cijfers van een ISBN-10 code\n      voorstellen, dan wordt het controlecijfer\u0026#160;$$x_{10}$$ als volgt\n      berekend: \\[x_{10} = (x_1+ 2x_2+ 3x_3+ 4x_4+ 5x_5+ 6x_6+ 7x_7+ 8x_8+\n      9x_9)\\!\\!\\!\\!\\mod{11}\\] Het controlecijfer $$x_{10}$$ kan m.a.w. de\n      waarden 0 tot en met 10 aannemen. Gevraagd wordt om een programma te\n      schrijven dat het controlecijfer berekent op basis van de eerste negen\n      cijfers van een ISBN-10 code.\u003c/p\u003e\n    \u003ch3\u003eInvoer\u003c/h3\u003e\n    \u003cp\u003eNegen natuurlijke getallen $$x_1, \\ldots, x_9$$ ($$0 \\leq x_1, \\ldots,\n      x_9 \\leq 9$$), elk op een afzonderlijke regel. Deze stellen de eerste\n      negen cijfers van een gegeven ISBN-10 code voor.\u003c/p\u003e\n    \u003ch3\u003eUitvoer\u003c/h3\u003e\n    \u003cp\u003eE\u0026#233;n regel die een natuurlijk getal bevat: het controlecijfer dat\n      correspondeert met de gegeven cijfers van een ISBN-10 code. Zorg ervoor\n      dat dit natuurlijk getal geen voorloopnullen heeft.\u003c/p\u003e\n    \u003ch3\u003eVoorbeeld\u003c/h3\u003e\n    \u003cp\u003e\u003cstrong\u003eInvoer:\u003c/strong\u003e\u003c/p\u003e\n    \u003cpre\u003e9\n9\n7\n1\n5\n0\n2\n1\n0\u003c/pre\u003e\n    \u003cp\u003e\u003cstrong\u003eUitvoer:\u003c/strong\u003e\u003c/p\u003e\n    \u003cpre\u003e0\u003c/pre\u003e\n    \u003cdiv class=\"hidden-print\"\u003e\n    \u003ch3\u003ePythia spreekt \u0026#8230;\u003c/h3\u003e\n    \u003cp\u003eIn onderstaande video legt Pythia uit hoe je deze opgave kunt aanpakken.\n      Bekijk de video als opstapje naar het oplossen van de oefeningen over \u003ca\n        href=\"https://dodona.ugent.be/nl/exercises/?filter=opgaven/reeks01\"\u003evariabelen,\n        expressies en statements\u003c/a\u003e.\u003c/p\u003e\n    \u003cdiv class=\"dodona-centered-group\"\u003e\u003ciframe src=\"https://www.youtube.com/embed/Ne35kBQNLXg\"\n        allowfullscreen=\"\" frameborder=\"0\" height=\"315\" width=\"560\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n    \u003ch3\u003eEpiloog\u003c/h3\u003e\n    \u003cdiv class=\"dodona-centered-group\"\u003e \u003cimg alt=\"evolution into barcode\" data-caption=\" \u0026lt;div class=\u0026quot;thumbcaption\u0026quot;\u0026gt;Dit is wat er van ons zal worden. Wees dus maar voorbereid.\u0026lt;/div\u0026gt; \"\n        src=\"media/evaluation_barcode.jpg\" title=\"evolution into barcode\" height=\"320px\"\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n","url":"http://localhost:3000/nl/courses/5/series/110/exercises/1406271149.json"},{"id":1677102205,"name":"ISBN","description_format":"html","boilerplate":null,"programming_language":{"id":1,"name":"python","editor_name":"python","extension":"txt","created_at":"2019-09-13T09:29:52.000+02:00","updated_at":"2019-09-13T09:29:52.000+02:00"},"last_solution_is_best":true,"has_solution":true,"has_correct_solution":true,"description":"\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta content=\"text/html; charset=utf-8\" http-equiv=\"content-type\"\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cp\u003eBinnen het ISBN-10 (\u003ci\u003eInternational Standard Book Numbering\u003c/i\u003e) systeem\n      dat tot eind 2006 gebruikt werd, kreeg elk boek een unieke code toegewezen\n      die bestaat uit 10 cijfers. De eerste 9 daarvan geven informatie over het\n      boek zelf, terwijl het laatste louter een controlecijfer is dat dient om\n      foutieve ISBN-10 codes te detecteren.\u003c/p\u003e\n    \u003cdiv class=\"dodona-centered-group\"\u003e \u003cimg alt=\"ISBN\" data-caption=\" \u0026lt;div class=\u0026quot;thumbcaption\u0026quot;\u0026gt; ISBN in tekst en streepjescode\u0026lt;/div\u0026gt; \"\n        src=\"media/ISBN.gif\" title=\"ISBN\" height=\"140\"\u003e \u003c/div\u003e\n    \u003cp\u003eIndien $$x_1, \\ldots, x_9$$ de eerste 9 cijfers van een ISBN-10 code\n      voorstellen, dan wordt het controlecijfer\u0026#160;$$x_{10}$$ als volgt\n      berekend: \\[x_{10} = (x_1+ 2x_2+ 3x_3+ 4x_4+ 5x_5+ 6x_6+ 7x_7+ 8x_8+\n      9x_9)\\!\\!\\!\\!\\mod{11}\\] Het controlecijfer $$x_{10}$$ kan m.a.w. de\n      waarden 0 tot en met 10 aannemen. Gevraagd wordt om een programma te\n      schrijven dat het controlecijfer berekent op basis van de eerste negen\n      cijfers van een ISBN-10 code.\u003c/p\u003e\n    \u003ch3\u003eInvoer\u003c/h3\u003e\n    \u003cp\u003eNegen natuurlijke getallen $$x_1, \\ldots, x_9$$ ($$0 \\leq x_1, \\ldots,\n      x_9 \\leq 9$$), elk op een afzonderlijke regel. Deze stellen de eerste\n      negen cijfers van een gegeven ISBN-10 code voor.\u003c/p\u003e\n    \u003ch3\u003eUitvoer\u003c/h3\u003e\n    \u003cp\u003eE\u0026#233;n regel die een natuurlijk getal bevat: het controlecijfer dat\n      correspondeert met de gegeven cijfers van een ISBN-10 code. Zorg ervoor\n      dat dit natuurlijk getal geen voorloopnullen heeft.\u003c/p\u003e\n    \u003ch3\u003eVoorbeeld\u003c/h3\u003e\n    \u003cp\u003e\u003cstrong\u003eInvoer:\u003c/strong\u003e\u003c/p\u003e\n    \u003cpre\u003e9\n9\n7\n1\n5\n0\n2\n1\n0\u003c/pre\u003e\n    \u003cp\u003e\u003cstrong\u003eUitvoer:\u003c/strong\u003e\u003c/p\u003e\n    \u003cpre\u003e0\u003c/pre\u003e\n    \u003cdiv class=\"hidden-print\"\u003e\n    \u003ch3\u003ePythia spreekt \u0026#8230;\u003c/h3\u003e\n    \u003cp\u003eIn onderstaande video legt Pythia uit hoe je deze opgave kunt aanpakken.\n      Bekijk de video als opstapje naar het oplossen van de oefeningen over \u003ca\n        href=\"https://dodona.ugent.be/nl/exercises/?filter=opgaven/reeks01\"\u003evariabelen,\n        expressies en statements\u003c/a\u003e.\u003c/p\u003e\n    \u003cdiv class=\"dodona-centered-group\"\u003e\u003ciframe src=\"https://www.youtube.com/embed/Ne35kBQNLXg\"\n        allowfullscreen=\"\" frameborder=\"0\" height=\"315\" width=\"560\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n    \u003ch3\u003eEpiloog\u003c/h3\u003e\n    \u003cdiv class=\"dodona-centered-group\"\u003e \u003cimg alt=\"evolution into barcode\" data-caption=\" \u0026lt;div class=\u0026quot;thumbcaption\u0026quot;\u0026gt;Dit is wat er van ons zal worden. Wees dus maar voorbereid.\u0026lt;/div\u0026gt; \"\n        src=\"media/evaluation_barcode.jpg\" title=\"evolution into barcode\" height=\"320px\"\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n","url":"http://localhost:3000/nl/courses/5/series/110/exercises/1677102205.json"}]), {status: 200}));// {json: JSON.stringify(json), status: 200}
		let exercises = await exercise_manager.getAll(series);
		expect(exercises).toBeTruthy();
		exercises.forEach(exercise => expect(exercise).toBeTruthy());
		expect(exercises.length).toBe(2);
	})

	it("Test exerciserManager.getExcercise(:number).", async () => {
		fetch.mockResolvedValue(new Response(JSON.stringify(exercise_json), {status: 200}));// {json: JSON.stringify(json), status: 200}
		let exercise = await exercise_manager.getExcercise(exercise_json.id);
		expect(exercise).toBeTruthy();
		expect(exercise).toStrictEqual(Exercise.fromJSON(exercise_json));
	})

	it("Test exerciserManager.getExcerciseOfCourse(:number, :number).", async () => {
		fetch.mockResolvedValue(new Response(JSON.stringify(exercise_json), {status: 200}));// {json: JSON.stringify(json), status: 200}
		let exercise = await exercise_manager.getExcerciseOfCourse(course_json.id, exercise_json.id);
		expect(exercise).toBeTruthy();
		expect(exercise).toStrictEqual(Exercise.fromJSON(exercise_json));
	})

	it("Test exerciseManager.getFromPartialSubmission(:PartialSubmission).", async () => {
		let partialsub_json = {"created_at":"2019-09-13T09:30:20.000+02:00","status":"correct","summary":null,"accepted":true,"id":1547,"url":"http://localhost:3000/nl/submissions/1547.json","user":"http://localhost:3000/nl/users/199.json","exercise":"http://localhost:3000/nl/exercises/1677102205.json","course":"http://localhost:3000/nl/courses/5.json"};
		fetch.mockResolvedValue(new Response(JSON.stringify(exercise_json), {status: 200}));// {json: JSON.stringify(json), status: 200}
		let partial_submission = PartialSubmission.fromJSON(partialsub_json);
		let exercise = await exercise_manager.getFromPartialSubmission(partial_submission);
		expect(exercise).toBeTruthy();
		expect(exercise).toStrictEqual(Exercise.fromJSON(exercise_json));
	})
	
	it("Test exerciseManager.getFromPartialSubmission(:PartialSubmission) without course url.", async () => {
		let partialsub_json = {"created_at":"2019-09-13T09:30:20.000+02:00","status":"correct","summary":null,"accepted":true,"id":1547,"url":"http://localhost:3000/nl/submissions/1547.json","user":"http://localhost:3000/nl/users/199.json","exercise":"http://localhost:3000/nl/exercises/1677102205.json","course":null};
		fetch.mockResolvedValue(new Response(JSON.stringify(exercise_json), {status: 200}));// {json: JSON.stringify(json), status: 200}
		let partial_submission = PartialSubmission.fromJSON(partialsub_json);
		let exercise = await exercise_manager.getFromPartialSubmission(partial_submission);
		expect(exercise).toBeTruthy();
		expect(exercise).toStrictEqual(Exercise.fromJSON(exercise_json));
	})

	it("Test exerciseManager.getFromPartialSubmission(:PartialSubmission) without course id in the course url.", async () => {
		let partialsub_json = {"created_at":"2019-09-13T09:30:20.000+02:00","status":"correct","summary":null,"accepted":true,"id":1547,"url":"http://localhost:3000/nl/submissions/1547.json","user":"http://localhost:3000/nl/users/199.json","exercise":"http://localhost:3000/nl/exercises/1677102205.json","course":"http://localhost:3000/nl/courses/.json"};
		fetch.mockResolvedValue(new Response(JSON.stringify(exercise_json), {status: 200}));// {json: JSON.stringify(json), status: 200}
		let partial_submission = PartialSubmission.fromJSON(partialsub_json);
		let exercise = await exercise_manager.getFromPartialSubmission(partial_submission);
		expect(exercise).toBeTruthy();
		expect(exercise).toStrictEqual(Exercise.fromJSON(exercise_json));
	})

	it("Test exerciseManager.getFromPartialSubmission(:PartialSubmission) without course and exercise url.", async () => {
		let partialsub_json = {"created_at":"2019-09-13T09:30:20.000+02:00","status":"correct","summary":null,"accepted":true,"id":1547,"url":"http://localhost:3000/nl/submissions/1547.json","user":"http://localhost:3000/nl/users/199.json","exercise":null,"course":null};
		fetch.mockResolvedValue(new Response(JSON.stringify(exercise_json), {status: 200}));// {json: JSON.stringify(json), status: 200}
		let partial_submission = PartialSubmission.fromJSON(partialsub_json);
		try {
			await exercise_manager.getFromPartialSubmission(partial_submission);
		} catch (error) {
			expect(error).toStrictEqual(new ExerciseNotFoundException(partial_submission.getExerciseUrl()));
		}
	})

	it("Test exerciseManager.getFromPartialSubmission(:PartialSubmission) without exercise url.", async () => {
		let partialsub_json = {"created_at":"2019-09-13T09:30:20.000+02:00","status":"correct","summary":null,"accepted":true,"id":1547,"url":"http://localhost:3000/nl/submissions/1547.json","user":"http://localhost:3000/nl/users/199.json","exercise":null,"course":"http://localhost:3000/nl/courses/5.json"};
		fetch.mockResolvedValue(new Response(JSON.stringify(exercise_json), {status: 200}));// {json: JSON.stringify(json), status: 200}
		let partial_submission = PartialSubmission.fromJSON(partialsub_json);
		try {
			await exercise_manager.getFromPartialSubmission(partial_submission);
		} catch (error) {
			expect(error).toStrictEqual(new ExerciseNotFoundException(partial_submission.getExerciseUrl()));
		}
	})
})